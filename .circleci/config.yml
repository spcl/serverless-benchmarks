version: 2.1

orbs:
  python: circleci/python@1.4.0

jobs:
  linting:
    executor: python/default
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          command: |
            sudo apt update && sudo apt install libcurl4-openssl-dev
          name: Install curl-config from Ubuntu APT
      - run:
          command: |
            python3 install.py --aws --azure --gcp --no-local
          name: Install pip dependencies
      - run:
          command: |
            . python-venv/bin/activate
            black sebs --check --config .black.toml
          name: Python code formatting with black
      - run:
          command: |
            . python-venv/bin/activate
            flake8 sebs --config=.flake8.cfg --tee --output-file flake-reports
          name: Python code lint with flake8
      - run:
          command: |
            . python-venv/bin/activate
            mypy sebs --config-file=.mypy.ini
          name: Python static code verification with mypy
      - store_artifacts:
          path: flake-reports
          destination: flake-reports
  test-aws:
    executor: python/default
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          command: |
            if [[ -d $HOME/docker ]];
            then
              ls $HOME/docker/*.tar.gz | xargs -I {file} sh -c "zcat {file} | docker load";
            else
              docker pull mcopik/serverless-benchmarks:build.aws.python.3.7
              docker pull mcopik/serverless-benchmarks:build.aws.nodejs.12.x
            fi
          name: Load Docker images
      - run:
          command: |
            python3 install.py --aws
          name: Install pip dependencies
      - run:
          command: |
            mkdir -p $HOME/docker
            docker images mcopik/serverless-benchmarks --filter='dangling=false' --format '{{.Repository}}:{{.Tag}} {{.ID}}' |\
            xargs -n 2 -t sh -c 'test -e $HOME/docker/$1.tar.gz || docker save $0 | gzip -2 > $HOME/docker/$1.tar.gz'
          name: Save Docker images
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "sebs-virtualenv"
            - $HOME/docker
      - run:
          command: |
            . sebs-virtualenv/bin/activate
            tests/test_runner.py --deployment aws
          name: Execute AWS tests

workflows:
  main:
    jobs:
      - linting

