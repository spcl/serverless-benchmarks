import json
from typing import Dict, List, Optional

from sebs.utils import project_absolute_path


class SeBSConfig:
    """
    Global SeBS configuration manager.

    Loads and provides access to system-wide configurations defined in
    `config/systems.json`. This includes Docker repository details,
    deployment-specific package and file information, supported runtimes,
    and image naming conventions.
    """
    def __init__(self):
        """
        Initialize SeBSConfig by loading `systems.json`.
        """
        with open(project_absolute_path("config", "systems.json"), "r") as cfg:
            self._system_config = json.load(cfg)
        self._image_tag_prefix: str = ""

    @property
    def image_tag_prefix(self) -> str:
        """
        An optional prefix to be added to Docker image tags generated by SeBS.
        Default is an empty string.
        """
        return self._image_tag_prefix

    @image_tag_prefix.setter
    def image_tag_prefix(self, tag: str):
        """
        Set the Docker image tag prefix.

        :param tag: The prefix string.
        """
        self._image_tag_prefix = tag

    def docker_repository(self) -> str:
        """
        Get the Docker repository name used for SeBS images.

        :return: Docker repository name (e.g., "user/sebs-images").
        """
        return self._system_config["general"]["docker_repository"]

    def deployment_packages(self, deployment_name: str, language_name: str) -> Dict[str, str]:
        """
        Get deployment-specific packages for a given language.
        These are packages added by SeBS to the benchmark's requirements.

        :param deployment_name: Name of the FaaS deployment (e.g., "aws", "local").
        :param language_name: Name of the programming language (e.g., "python", "nodejs").
        :return: Dictionary of package names to version strings.
        """
        return self._system_config[deployment_name]["languages"][language_name]["deployment"][
            "packages"
        ]

    def deployment_module_packages(
        self, deployment_name: str, language_name: str
    ) -> Dict[str, List[str]]: # Corrected return type
        """
        Get deployment-specific packages required by SeBS modules (e.g., storage wrappers).

        :param deployment_name: Name of the FaaS deployment.
        :param language_name: Name of the programming language.
        :return: Dictionary where keys are module names and values are lists of package strings.
        """
        return self._system_config[deployment_name]["languages"][language_name]["deployment"][
            "module_packages"
        ]

    def deployment_files(self, deployment_name: str, language_name: str) -> List[str]:
        """
        Get list of deployment-specific files (e.g., handlers, wrappers) to be included.

        :param deployment_name: Name of the FaaS deployment.
        :param language_name: Name of the programming language.
        :return: List of filenames.
        """
        return self._system_config[deployment_name]["languages"][language_name]["deployment"][
            "files"
        ]

    def docker_image_types(self, deployment_name: str, language_name: str) -> List[str]:
        """
        Get list of Docker image types defined for a deployment and language (e.g., "build", "run").

        :param deployment_name: Name of the FaaS deployment.
        :param language_name: Name of the programming language.
        :return: List of image type strings.
        """
        return self._system_config[deployment_name]["languages"][language_name]["images"]

    def supported_language_versions(
        self, deployment_name: str, language_name: str, architecture: str
    ) -> List[str]:
        """
        Get list of supported language versions for a deployment, language, and architecture.

        :param deployment_name: Name of the FaaS deployment.
        :param language_name: Name of the programming language.
        :param architecture: CPU architecture (e.g., "x64", "arm64").
        :return: List of supported version strings.
        """
        languages = self._system_config.get(deployment_name, {}).get("languages", {})
        base_images = languages.get(language_name, {}).get("base_images", {})
        return list(base_images.get(architecture, {}).keys())

    def supported_architecture(self, deployment_name: str) -> List[str]:
        """
        Get list of supported CPU architectures for a deployment.

        :param deployment_name: Name of the FaaS deployment.
        :return: List of architecture strings (e.g., ["x64", "arm64"]).
        """
        return self._system_config[deployment_name]["architecture"]

    def supported_package_deployment(self, deployment_name: str) -> bool:
        """
        Check if traditional package deployment (e.g., zip files) is supported.

        :param deployment_name: Name of the FaaS deployment.
        :return: True if package deployment is supported, False otherwise.
        """
        return "package" in self._system_config[deployment_name]["deployments"]

    def supported_container_deployment(self, deployment_name: str) -> bool:
        """
        Check if container-based deployment is supported.

        :param deployment_name: Name of the FaaS deployment.
        :return: True if container deployment is supported, False otherwise.
        """
        return "container" in self._system_config[deployment_name]["deployments"]

    def benchmark_base_images(
        self, deployment_name: str, language_name: str, architecture: str
    ) -> Dict[str, str]:
        """
        Get mapping of language versions to base Docker image names for benchmarks.

        :param deployment_name: Name of the FaaS deployment.
        :param language_name: Name of the programming language.
        :param architecture: CPU architecture.
        :return: Dictionary mapping version strings to Docker image URIs.
        """
        return self._system_config[deployment_name]["languages"][language_name]["base_images"][
            architecture
        ]

    def version(self) -> str:
        """
        Get the SeBS framework version.

        :return: SeBS version string, or "unknown".
        """
        return self._system_config["general"].get("SeBS_version", "unknown")

    def benchmark_image_name(
        self,
        system: str,
        benchmark: str,
        language_name: str,
        language_version: str,
        architecture: str,
        registry: Optional[str] = None,
    ) -> str:
        """
        Construct the full Docker image name (repository:tag) for a benchmark function.

        :param system: Name of the FaaS system (e.g., "aws", "local").
        :param benchmark: Name of the benchmark.
        :param language_name: Name of the programming language.
        :param language_version: Version of the language runtime.
        :param architecture: CPU architecture.
        :param registry: Optional custom Docker registry URL.
        :return: Full Docker image name string.
        """
        tag = self.benchmark_image_tag(
            system, benchmark, language_name, language_version, architecture
        )
        repo = self.docker_repository()
        if registry: # Check if registry is not None and not empty
            return f"{registry}/{repo}:{tag}"
        else:
            return f"{repo}:{tag}"

    def benchmark_image_tag(
        self,
        system: str,
        benchmark: str,
        language_name: str,
        language_version: str,
        architecture: str,
    ) -> str:
        """
        Construct the Docker image tag for a benchmark function.

        The tag incorporates system, benchmark, language, version, architecture,
        an optional user-defined prefix, and the SeBS version.
        Format: function.{system}.{benchmark}.{language_name}-{language_version}-{architecture}[-{prefix}]-{sebs_version}

        :param system: Name of the FaaS system.
        :param benchmark: Name of the benchmark.
        :param language_name: Name of the programming language.
        :param language_version: Version of the language runtime.
        :param architecture: CPU architecture.
        :return: Docker image tag string.
        """
        base_tag = f"function.{system}.{benchmark}.{language_name}-{language_version}-{architecture}"
        if self.image_tag_prefix:
            base_tag = f"{base_tag}-{self.image_tag_prefix}"
        sebs_version_val = self.version() # Use self.version() to get SeBS version
        full_tag = f"{base_tag}-{sebs_version_val}"
        return full_tag

    def username(self, deployment_name: str, language_name: str) -> str:
        """
        Get the default username inside Docker build containers for a deployment and language.

        :param deployment_name: Name of the FaaS deployment.
        :param language_name: Name of the programming language.
        :return: Username string.
        """
        return self._system_config[deployment_name]["languages"][language_name]["username"]
